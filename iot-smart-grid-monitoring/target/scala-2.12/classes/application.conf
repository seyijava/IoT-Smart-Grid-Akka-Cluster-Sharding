akka{
 
 akka.persistence.journal.plugin = "cassandra-journal"
 
 loggers = ["akka.event.slf4j.Slf4jLogger"]
 loglevel = "INFO"
 logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  actor {
    
    provider = cluster
    
    akka.actor.allow-java-serialization = off
    akka.actor.warn-about-java-serializer-usage = off
   
   
     serializers {
        proto = "akka.remote.serialization.ProtobufSerializer"
    }
    
      serialization-bindings {
      "com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device" = proto
       "com.bigdataconcept.akka.distributed.iot.smart.grid.proto.IoTEvent" = proto
        "com.bigdataconcept.akka.distributed.iot.smart.grid.proto.SendIoTDataTelemetry" = proto
        "com.bigdataconcept.akka.distributed.iot.smart.grid.proto.ModelsProto" = proto
      }
   
    default-dispatcher {
    fork-join-executor {
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 5
    }
   }
    
  }


  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    enabled = on
    transport = tcp
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://SmartGridMonitoringSystem@127.0.0.1:2551",
      "akka://SmartGridMonitoringSystem@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 10s
    sharding.state-store-mode = ddata
   
  }

 
    
  
 persistence {
      journal.plugin = "cassandra-journal"
      snapshot-store.plugin = "cassandra-snapshot-store"
   }
 
 
 cassandra-journal {
         contact-points = [ "127.888.0.1" ]
          port = 9042
       }  
 
 }
  
  
 
akka.cluster.sharding {

 remember-entities = off
 rebalance-interval = 30 s
 
 
 least-shard-allocation-strategy {
    # Threshold of how large the difference between most and least number of
    # allocated shards must be to begin the rebalancing.
    # The difference between number of shards in the region with most shards and
    # the region with least shards must be greater than (>) the `rebalanceThreshold`
    # for the rebalance to occur.
    # It is also the maximum number of shards that will start rebalancing per rebalance-interval
    # 1 gives the best distribution and therefore typically the best choice.
    # Increasing the threshold can result in quicker rebalance but has the
    # drawback of increased difference between number of shards (and therefore load)
    # on different nodes before rebalance will occur.
    rebalance-threshold = 2

    # The number of ongoing rebalancing processes is limited to this number.
    max-simultaneous-rebalance = 2
  }
  
   journal-plugin-id = "akka.persistence.journal.cassandra-sharding"
   snapshot-plugin-id = "akka.persistence.snapshot.cassandra-sharding"
}


akka.kafka.producer {
  # Tuning parameter of how many sends that can run in parallel.
  parallelism = 100
  
  # How long to wait for `KafkaProducer.close`
  close-timeout = 60s
  
  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.
  kafka-clients {
     enable.auto.commit = false

    bootstrap.servers = "192.168.2.45:9092"
  }
}

app{
   brokerUrl = "tcp://192.168.2.45:1883"
   topic = "$share/akkaiot/SmartGridIOT"
   kafkaBroker = "192.168.2.45:9092"
} 




akka{
 
 loggers = ["akka.event.slf4j.Slf4jLogger"]
 loglevel = "INFO"
 logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  
  actor {
    provider = cluster
    akka.actor.allow-java-serialization = off
    
    
   
    default-dispatcher {
    fork-join-executor {
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 5
    }
   }
    
  }


  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    enabled = on
    transport = tcp
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://SmartGridMonitoringSystem@127.0.0.1:2551",
      "akka://SmartGridMonitoringSystem@127.0.0.1:2552"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 10s
    sharding.state-store-mode = ddata
  }

 persistence {

    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }


 }
 
 
 
 cassandra-journal{
    contact-points = ["192.168.2.45"]
    port = 9042
 }
 
 cassandra-snapshot-store {

  port = 9142
}


# Properties for akka.kafka.ProducerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.producer {
  # Tuning parameter of how many sends that can run in parallel.
  parallelism = 100

  # How long to wait for `KafkaProducer.close`
  close-timeout = 60s

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.
  kafka-clients {
    bootstrap.servers = "192.168.2.45:9092"
  }
}


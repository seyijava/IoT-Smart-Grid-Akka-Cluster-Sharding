// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bigdataconcept.akka.distributed.iot.smart.grid.proto

@SerialVersionUID(0L)
final case class Device(
    deviceId: _root_.scala.Predef.String = "",
    longititude: _root_.scala.Double = 0.0,
    latititude: _root_.scala.Double = 0.0,
    deviceType: _root_.scala.Predef.String = "",
    deviceNumber: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Device] with scalapb.lenses.Updatable[Device] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = deviceId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = longititude
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
        }
      };
      
      {
        val __value = latititude
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
        }
      };
      
      {
        val __value = deviceType
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = deviceNumber
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = deviceId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = longititude
        if (__v != 0.0) {
          _output__.writeDouble(2, __v)
        }
      };
      {
        val __v = latititude
        if (__v != 0.0) {
          _output__.writeDouble(3, __v)
        }
      };
      {
        val __v = deviceType
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = deviceNumber
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device = {
      var __deviceId = this.deviceId
      var __longititude = this.longititude
      var __latititude = this.latititude
      var __deviceType = this.deviceType
      var __deviceNumber = this.deviceNumber
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __deviceId = _input__.readString()
          case 17 =>
            __longititude = _input__.readDouble()
          case 25 =>
            __latititude = _input__.readDouble()
          case 34 =>
            __deviceType = _input__.readString()
          case 42 =>
            __deviceNumber = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device(
          deviceId = __deviceId,
          longititude = __longititude,
          latititude = __latititude,
          deviceType = __deviceType,
          deviceNumber = __deviceNumber
      )
    }
    def withDeviceId(__v: _root_.scala.Predef.String): Device = copy(deviceId = __v)
    def withLongititude(__v: _root_.scala.Double): Device = copy(longititude = __v)
    def withLatititude(__v: _root_.scala.Double): Device = copy(latititude = __v)
    def withDeviceType(__v: _root_.scala.Predef.String): Device = copy(deviceType = __v)
    def withDeviceNumber(__v: _root_.scala.Predef.String): Device = copy(deviceNumber = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = deviceId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = longititude
          if (__t != 0.0) __t else null
        }
        case 3 => {
          val __t = latititude
          if (__t != 0.0) __t else null
        }
        case 4 => {
          val __t = deviceType
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = deviceNumber
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(deviceId)
        case 2 => _root_.scalapb.descriptors.PDouble(longititude)
        case 3 => _root_.scalapb.descriptors.PDouble(latititude)
        case 4 => _root_.scalapb.descriptors.PString(deviceType)
        case 5 => _root_.scalapb.descriptors.PString(deviceNumber)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device
}

object Device extends scalapb.GeneratedMessageCompanion[com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0.0).asInstanceOf[_root_.scala.Double],
      __fieldsMap.getOrElse(__fields.get(2), 0.0).asInstanceOf[_root_.scala.Double],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ModelsProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ModelsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device(
    deviceId = "",
    longititude = 0.0,
    latititude = 0.0,
    deviceType = "",
    deviceNumber = ""
  )
  implicit class DeviceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device](_l) {
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def longititude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.longititude)((c_, f_) => c_.copy(longititude = f_))
    def latititude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.latititude)((c_, f_) => c_.copy(latititude = f_))
    def deviceType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.deviceNumber)((c_, f_) => c_.copy(deviceNumber = f_))
  }
  final val DEVICEID_FIELD_NUMBER = 1
  final val LONGITITUDE_FIELD_NUMBER = 2
  final val LATITITUDE_FIELD_NUMBER = 3
  final val DEVICETYPE_FIELD_NUMBER = 4
  final val DEVICENUMBER_FIELD_NUMBER = 5
  def of(
    deviceId: _root_.scala.Predef.String,
    longititude: _root_.scala.Double,
    latititude: _root_.scala.Double,
    deviceType: _root_.scala.Predef.String,
    deviceNumber: _root_.scala.Predef.String
  ): _root_.com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device = _root_.com.bigdataconcept.akka.distributed.iot.smart.grid.proto.Device(
    deviceId,
    longititude,
    latititude,
    deviceType,
    deviceNumber
  )
}
